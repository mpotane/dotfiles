#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
;; and `package-pinned-packages`. Most users will not need or want to do this.
;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
(package-initialize)
#+end_src

#+begin_src emacs-lisp
(eval-when-compile (require 'use-package))
(require 'use-package-ensure)
(setq use-package-always-ensure t)
(use-package auto-package-update
  :config
  (setq auto-package-update-delete-old-versions t)
  (setq auto-package-update-hide-results t)
  (auto-package-update-maybe))
#+end_src

#+begin_src emacs-lisp
(use-package rainbow-mode
  :config
  (setq rainbow-x-colors nil)
  (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+end_src

#+begin_src emacs-lisp
(use-package atom-one-dark-theme
  :ensure t
  :init
  (load-theme 'atom-one-dark t))
#+end_src

#+begin_src emacs-lisp
(use-package flycheck
  :config
  (add-hook 'after-init-hook 'global-flycheck-mode))
#+end_src

#+begin_src emacs-lisp
(use-package yasnippet
    :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode 1))
(use-package yasnippet-snippets)
#+end_src

#+begin_src emacs-lisp
(use-package which-key
  :config
  (add-hook 'after-init-hook 'which-key-mode))
#+end_src

#+begin_src emacs-lisp
(custom-set-variables
 '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+end_src

#+begin_src emacs-lisp
(use-package iedit)
#+end_src

#+begin_src emacs-lisp
(unless (package-installed-p 'ac-php)
    (package-refresh-contents)
    (package-install 'ac-php))
#+end_src

#+begin_src emacs-lisp
(use-package web-mode
   :mode ("\\.html?\\'")
   :mode ("\\.css?\\'")
   :mode ("\\.php?\\'")
   :config
   (setq web-mode-enable-current-element-highlight t)
   (setq web-mode-ac-sources-alist
    '(("php" . (ac-source-yasnippet ac-source-php-auto-yasnippets))
     ("html" . (ac-source-emmet-html-aliases ac-source-emmet-html-snippets))
     ("css" . (ac-source-css-property ac-source-emmet-css-snippets))))

   (add-hook 'web-mode-before-auto-complete-hooks
     '(lambda ()
       (let ((web-mode-cur-language
          (web-mode-language-at-pos)))
          (if (string= web-mode-cur-language "php")
              (yas-activate-extra-mode 'php-mode)
              (yas-deactivate-extra-mode 'php-mode))
           (if (string= web-mode-cur-language "css")
       (setq emmet-use-css-transform t)
       (setq emmet-use-css-transform nil))))))
#+end_src

#+begin_src emacs-lisp
(use-package smartparens
  :config
  (add-hook 'prog-mode-hook 'smartparens-mode))
#+end_src

#+begin_src emacs-lisp
(setq-default cursor-type '(bar . 1))
#+end_src

#+begin_src emacs-lisp
(setq-default display-line-numbers 'relative)
#+end_src

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

#+begin_src emacs-lisp
  (use-package dashboard
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
    ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)))
			    ;;(agenda . 5 )
			    ;;(bookmarks . 3)
			    ;;(projects . 3)
			    ;;(registers . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
				(bookmarks . "book"))))

(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src

#+begin_src emacs-lisp
(delete-selection-mode t)
#+end_src

#+begin_src emacs-lisp
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src

#+begin_src emacs-lisp
;; zoom in/out like we do everywhere else.
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
